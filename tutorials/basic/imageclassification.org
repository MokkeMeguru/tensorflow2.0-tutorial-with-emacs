# -*- org-export-babel-evaluate: nil -*-
#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+options: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+title: エキスパートのための Tensorflow 2.0 入門
#+date: <2019-08-24 土>
#+author: MokkeMeguru
#+email: meguru.mokke@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 26.2 (Org mode 9.1.9)
#+LATEX_CLASS: extarticle
# #+LATEX_CLASS_OPTIONS: [a4paper, dvipdfmx, twocolumn, 8pt]
#+LATEX_CLASS_OPTIONS: [a4paper, dvipdfmx]
#+LATEX_HEADER: \usepackage{amsmath, amssymb, bm}
#+LATEX_HEADER: \usepackage{graphics}
#+LATEX_HEADER: \usepackage{color}
#+LATEX_HEADER: \usepackage{times}
#+LATEX_HEADER: \usepackage{longtable}
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage{fancyvrb}
#+LATEX_HEADER: \usepackage{indentfirst}
#+LATEX_HEADER: \usepackage{pxjahyper}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage[backend=biber, bibencoding=utf8, style=authoryear]{biblatex}
#+LATEX_HEADER: \usepackage[left=25truemm, right=25truemm]{geometry}
#+LATEX_HEADER: \usepackage{ascmac}
#+LATEX_HEADER: \usepackage{algorithm}
#+LATEX_HEADER: \usepackage{algorithmic}
#+LATEX_HEADER: \hypersetup{ colorlinks=true, citecolor=blue, linkcolor=red, urlcolor=orange}
#+LATEX_HEADER: \addbibresource{reference.bib}
#+DESCRIPTION:
#+KEYWORDS:
#+STARTUP: indent overview inlineimages
#+PROPERTY: header-args :eval never-export
* TensorFlow ライブラリのインポート
  #+NAME: 08bb0ced-8cbe-4e1f-8d8f-0a03de9e4b5c
  #+BEGIN_SRC ein-python :session localhost :results raw drawer :exports both
    from __future__ import division, absolute_import
    from __future__ import print_function, unicode_literals
    from functools import reduce

    import tensorflow as tf
    from tensorflow import keras

    import numpy as np
    import matplotlib.pyplot as plt

    print('tensorflow\'s version: {}'.format(tf.__version__))
  #+END_SRC

  #+RESULTS: 08bb0ced-8cbe-4e1f-8d8f-0a03de9e4b5c
  :results:
  tensorflow's version: 2.0.0-beta1
  :end:

* fashion MNIST のデータ読み込み
  fashion MNIST は服の画像とその服の種類のデータセット。服の種類についてクラス分類するのが一般的な用いられ方。

  #+CAPTION: fashion labels
  #+ATTR_LATEX: :environment tabular :align |c|c|
  |-------+-------------|
  | label | class       |
  |-------+-------------|
  |     0 | T-shirt/top |
  |     1 | Trouser     |
  |     2 | Pullover    |
  |     3 | Dress       |
  |     4 | Coat        |
  |     5 | Sandal      |
  |     6 | Shirt       |
  |     7 | Sneaker     |
  |     8 | Bag         |
  |     9 | Ankle boot  |
  |-------+-------------|
    

  #+NAME: 982feec1-aa1c-406e-89a6-a06611e3c07d
  #+BEGIN_SRC ein-python :session localhost :results raw drawer :exports both
    fashion_mnist = keras.datasets.fashion_mnist
    (train_images, train_labels), (test_images,
                                   test_labels) = fashion_mnist.load_data()

    class_names = [
        'T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt',
        'Sneaker', 'Bag', 'Ankle boot'
    ]


    def print_infos(infolist: list):
        for info in infolist:
            print(info)


    print_infos([
        "image size", "-----------", "{}".format(train_images[0].shape), "\n",
        "sample size", "-----------", "train: {}".format(len(train_images)),
        "test  : {}".format(len(test_images)), "-----------"
    ])
  #+END_SRC

  #+RESULTS: 982feec1-aa1c-406e-89a6-a06611e3c07d
  :results:
  image size
  -----------
  (28, 28)


  sample size
  -----------
  train: 60000
  test  : 10000
  -----------
  :end:

** fashion MNIST の画像サンプル
  #+NAME: 4ff25e2f-f916-4b5a-a57e-47c16b46e28a
  #+BEGIN_SRC ein-python :session localhost :results raw drawer :exports both
    plt.figure()
    plt.imshow(train_images[0])
    plt.colorbar()
    plt.grid(False)
    plt.show()
  #+END_SRC

  #+RESULTS: 4ff25e2f-f916-4b5a-a57e-47c16b46e28a
  :results:
  [[file:ein-images/ob-ein-24abf0e3734be4c28f98ace180b61624.png]]
  :end:
  
** 画像の正規化
画像サイズを [0, 255] から [0, 1] へ正規化する。
#+NAME: 729412ac-0be6-411c-a32a-98f4958a0ffe
  #+BEGIN_SRC ein-python :session localhost :results raw drawer :exports code
    train_images = train_images / 255.0
    test_images = test_images / 255.0

    plt.figure(figsize=(10, 10))
    for i in range(25):
        plt.subplot(5, 5, i + 1)
        plt.xticks([])
        plt.yticks([])
        plt.grid(False)
        plt.imshow(train_images[i], cmap='binary_r')
        plt.xlabel(class_names[train_labels[i]])
  #+END_SRC

  #+RESULTS: 729412ac-0be6-411c-a32a-98f4958a0ffe
  :results:
  [[file:ein-images/ob-ein-c7a00885052b5b4bbef9f911fc6d61b0.png]]
  :end:

* モデルの作成
  #+NAME: c3073c43-2ace-46dc-a1a0-ce899d545519
  #+BEGIN_SRC ein-python :session localhost :results raw drawer
    class MyModel(keras.Model):
        def __init__(self):
            super(MyModel, self).__init__()
            self.flatten = keras.layers.Flatten(input_shape=(28, 28))
            self.d1 = keras.layers.Dense(128, activation='relu')
            self.d2 = keras.layers.Dense(10, activation='softmax')

        def call(self, x):
            return reduce(lambda x, f: f(x), [x, self.flatten, self.d1, self.d2])


    model = MyModel()

    # model = keras.Sequential([
    #     keras.layers.Flatten(input_shape=(28, 28)),
    #     keras.layers.Dense(128, activation='relu'),
    #     keras.layers.Dense(10, activation='softmax')
    # ])

    model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])
  #+END_SRC

  #+RESULTS: c3073c43-2ace-46dc-a1a0-ce899d545519
  :results:
  :end:

* モデルの訓練
  #+NAME: d3ee3d4e-8536-43fa-96d6-34495abb5577
  #+BEGIN_SRC ein-python :session localhost :results none drawer :exports both
  model.fit(train_images, train_labels, epochs=10)
  #+END_SRC

  #+RESULTS: d3ee3d4e-8536-43fa-96d6-34495abb5577
  :results:
  Train on 60000 samples
  Epoch 1/10
  60000/60000 [==============================] - 2s 38us/sample - loss: 1.0990 - accuracy: 0.6615
  Epoch 2/10
  60000/60000 [==============================] - 2s 36us/sample - loss: 0.6437 - accuracy: 0.7694
  Epoch 3/10
  60000/60000 [==============================] - 2s 36us/sample - loss: 0.5687 - accuracy: 0.7965
  Epoch 4/10
  60000/60000 [==============================] - 2s 37us/sample - loss: 0.5258 - accuracy: 0.8141
  Epoch 5/10
  60000/60000 [==============================] - 2s 40us/sample - loss: 0.4979 - accuracy: 0.8253
  Epoch 6/10
  60000/60000 [==============================] - 2s 39us/sample - loss: 0.4785 - accuracy: 0.8315
  Epoch 7/10
  60000/60000 [==============================] - 2s 38us/sample - loss: 0.4641 - accuracy: 0.8363
  Epoch 8/10
  60000/60000 [==============================] - 2s 36us/sample - loss: 0.4517 - accuracy: 0.8417
  Epoch 9/10
  60000/60000 [==============================] - 2s 36us/sample - loss: 0.4426 - accuracy: 0.8445
  Epoch 10/10
  60000/60000 [==============================] - 2s 41us/sample - loss: 0.4344 - accuracy: 0.8468

  <tensorflow.python.keras.callbacks.History at 0x7f65fef26c50>

  Last executed 2019-08-24T18:02:40 in 23.0s
  :end:

* モデルの評価
  #+NAME: a7212457-67a4-4456-85cc-8ca47ab65521
  #+BEGIN_SRC ein-python :session localhost :results none drawer :exports both
    test_loss, test_acc = model.evaluate(test_images, test_labels)
    print_infos(['\n', 'test accuracy', test_acc])
  #+END_SRC

  #+RESULTS: a7212457-67a4-4456-85cc-8ca47ab65521
  :results:
  10000/10000 [==============================] - 0s 21us/sample - loss: 0.4611 - accuracy: 0.8347


  test accuracy
  0.8347


  Last executed 2019-08-24T18:04:26 in 0.0s
  :end:

* モデルの推論
  #+NAME: 2846cc55-c37a-4cf8-bb20-e768c303b8ca
  #+BEGIN_SRC ein-python :session localhost :results raw drawer :exports both
    predictions = model.predict(test_images[0:1])
    prediction = np.argmax(predictions[0])
    print_infos([
        'predictions', '-----------', predictions[0], '\n', 'predictions argmax',
        "-----------", '{}: {} ({}%)'.format(prediction, class_names[prediction],
                                             predictions[0][9] * 100)
    ])

    plt.figure(figsize=(6,3))

    plt.subplot(1, 2, 1)
    plt.imshow(test_images[0], cmap='binary_r')
    plt.grid(False)
    plt.xlabel(class_names[prediction])

    plt.subplot(1, 2, 2)
    plt.grid(False)
    plt.xticks(range(10))
    plt.yticks([])
    predict_plot = plt.bar(range(10), predictions[0], color='#777777')
    plt.ylim([0, 1])
    if prediction != test_labels[0]:
        predict_plot[prediction].set_color('red')
        predict_plot[test_labels[0]].set_color('blue')
    else:
        predict_plot[prediction].set_color('magenta')

    plt.show()
  #+END_SRC

  #+RESULTS: 2846cc55-c37a-4cf8-bb20-e768c303b8ca
  :results:
  predictions
  -----------
  [4.9821500e-07 1.8646313e-08 6.3109460e-06 5.5598271e-06 5.8469664e-06
   1.1526006e-01 1.1658683e-05 3.0735460e-01 5.3111254e-03 5.7204431e-01]


  predictions argmax
  -----------
  9: Ankle boot (57.2044312953949%)

  [[file:ein-images/ob-ein-5b388b332210f0317a3d8f44aa7a74b2.png]]
  :end:

