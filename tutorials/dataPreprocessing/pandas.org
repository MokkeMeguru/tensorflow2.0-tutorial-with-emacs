# -*- org-export-babel-evaluate: nil -*-
#+options: ':nil *:t -:t ::t <:t H:3 \n:t ^:t arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+options: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t                                                     
#+title: Pandas の読み込み
#+date: <2019-08-24 土>                                                                                           
#+author: MokkeMeguru                                                                                             
#+email: meguru.mokke@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 26.2 (Org mode 9.1.9)
#+LATEX_CLASS: extarticle
# #+LATEX_CLASS_OPTIONS: [a4paper, dvipdfmx, twocolumn, 8pt]
#+LATEX_CLASS_OPTIONS: [a4paper, dvipdfmx]
#+LATEX_HEADER: \usepackage{amsmath, amssymb, bm}
#+LATEX_HEADER: \usepackage{graphics}
#+LATEX_HEADER: \usepackage{color}
#+LATEX_HEADER: \usepackage{times}
#+LATEX_HEADER: \usepackage{longtable}
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage{fancyvrb}
#+LATEX_HEADER: \usepackage{indentfirst}
#+LATEX_HEADER: \usepackage{pxjahyper}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage[backend=biber, bibencoding=utf8, style=authoryear]{biblatex}
#+LATEX_HEADER: \usepackage[left=25truemm, right=25truemm]{geometry}
#+LATEX_HEADER: \usepackage{ascmac}
#+LATEX_HEADER: \usepackage{algorithm}
#+LATEX_HEADER: \usepackage{algorithmic}
#+LATEX_HEADER: \hypersetup{ colorlinks=true, citecolor=blue, linkcolor=red, urlcolor=orange}
#+LATEX_HEADER: \addbibresource{reference.bib}
#+DESCRIPTION:
#+KEYWORDS:
#+STARTUP: indent overview inlineimages
#+PROPERTY: header-args :eval never-export
* TensorFlow ライブラリのインポート
    #+NAME: eaa0d79b-f275-4039-88fa-e94633fba7a5
    #+BEGIN_SRC ein-python :session localhost :exports both :results raw drawer
    from __future__ import division, absolute_import
    from __future__ import print_function, unicode_literals
    from functools import reduce, partial

    import tensorflow as tf
    # import tensorflow_hub as hub

    from tensorflow import keras
    from tensorflow.keras import layers

    import numpy as np
    import matplotlib.pyplot as plt

    import pandas as pd
    # from sklearn.model_selection import train_test_split
    # import seaborn as sns
    import os
    # import yaml
    # import h5py

    def print_infos(infolist: list):
        for info in infolist:
            print(info)


    print_infos([
        '{:25}: {}'.format("tensorflow\'s version", tf.__version__),
    ])
  #+END_SRC

  #+RESULTS: eaa0d79b-f275-4039-88fa-e94633fba7a5
  :results:
  tensorflow's version     : 2.0.0-beta1
  :end:

* データのインポート
  #+NAME: 589e64a8-12ea-4b55-b21e-388b2c658804
  #+BEGIN_SRC ein-python :session localhost :results raw drawer
    csv_file = tf.keras.utils.get_file('heart.csv', 'https://storage.googleapis.com/applied-dl/heart.csv')
    df = pd.read_csv(csv_file)
    df.head()
  #+END_SRC

  #+RESULTS: 589e64a8-12ea-4b55-b21e-388b2c658804
  :results:
     age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \
  0   63    1   1       145   233    1        2      150      0      2.3      3   
  1   67    1   4       160   286    0        2      108      1      1.5      2   
  2   67    1   4       120   229    0        2      129      1      2.6      2   
  3   37    1   3       130   250    0        0      187      0      3.5      3   
  4   41    0   2       130   204    0        2      172      0      1.4      1   

     ca        thal  target  
  0   0       fixed       0  
  1   3      normal       1  
  2   2  reversible       0  
  3   0      normal       0  
  4   0      normal       0  
  :end:

|---+-----+-----+----+----------+------+-----+---------+---------+-------+---------+-------+----+------------+--------|
|   | age | sex | cp | trestbps | chol | fbs | restecg | thalach | exang | oldpeak | slope | ca | thal       | target |
|---+-----+-----+----+----------+------+-----+---------+---------+-------+---------+-------+----+------------+--------|
| 0 |  63 |   1 |  1 |      145 |  233 |   1 |       2 |     150 |     0 |     2.3 |     3 |  0 | fixed      |      0 |
| 1 |  67 |   1 |  4 |      160 |  286 |   0 |       2 |     108 |     1 |     1.5 |     2 |  3 | normal     |      1 |
| 2 |  67 |   1 |  4 |      120 |  229 |   0 |       2 |     129 |     1 |     2.6 |     2 |  2 | reversible |      0 |
| 3 |  37 |   1 |  3 |      130 |  250 |   0 |       0 |     187 |     0 |     3.5 |     3 |  0 | normal     |      0 |
| 4 |  41 |   0 |  2 |      130 |  204 |   0 |       2 |     172 |     0 |     1.4 |     1 |  0 | normal     |      0 |
|---+-----+-----+----+----------+------+-----+---------+---------+-------+---------+-------+----+------------+--------|

#+NAME: 13071231-b626-4786-9222-685037b48060
#+BEGIN_SRC ein-python :session localhost :results raw drawer :exports both
  df.dtypes
#+END_SRC

#+RESULTS: 13071231-b626-4786-9222-685037b48060
:results:
age           int64
sex           int64
cp            int64
trestbps      int64
chol          int64
fbs           int64
restecg       int64
thalach       int64
exang         int64
oldpeak     float64
slope         int64
ca            int64
thal         object
target        int64
dtype: object
:end:

カテゴリ名→カテゴリid へ変換します。

#+NAME: a2e9d5f9-53b0-400e-bd0a-34e484b3453c
#+BEGIN_SRC ein-python :session localhost :results raw drawer
  # object -> category
  df['thal'] = pd.Categorical(df['thal'])
  # category (str) -> category (id)
  df['thal'] = df.thal.cat.codes
  df.head()
#+END_SRC

#+RESULTS: a2e9d5f9-53b0-400e-bd0a-34e484b3453c
:results:
   age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \
0   63    1   1       145   233    1        2      150      0      2.3      3   
1   67    1   4       160   286    0        2      108      1      1.5      2   
2   67    1   4       120   229    0        2      129      1      2.6      2   
3   37    1   3       130   250    0        0      187      0      3.5      3   
4   41    0   2       130   204    0        2      172      0      1.4      1   

   ca  thal  target  
0   0     2       0  
1   3     3       1  
2   2     4       0  
3   0     3       0  
4   0     3       0  
:end:

|---+-----+-----+----+----------+------+-----+---------+---------+-------+---------+-------+----+------+--------|
|   | age | sex | cp | trestbps | chol | fbs | restecg | thalach | exang | oldpeak | slope | ca | thal | target |
|---+-----+-----+----+----------+------+-----+---------+---------+-------+---------+-------+----+------+--------|
| 0 |  63 |   1 |  1 |      145 |  233 |   1 |       2 |     150 |     0 |     2.3 |     3 |  0 |    2 |      0 |
| 1 |  67 |   1 |  4 |      160 |  286 |   0 |       2 |     108 |     1 |     1.5 |     2 |  3 |    3 |      1 |
| 2 |  67 |   1 |  4 |      120 |  229 |   0 |       2 |     129 |     1 |     2.6 |     2 |  2 |    4 |      0 |
| 3 |  37 |   1 |  3 |      130 |  250 |   0 |       0 |     187 |     0 |     3.5 |     3 |  0 |    3 |      0 |
| 4 |  41 |   0 |  2 |      130 |  204 |   0 |       2 |     172 |     0 |     1.4 |     1 |  0 |    3 |      0 |
|---+-----+-----+----+----------+------+-----+---------+---------+-------+---------+-------+----+------+--------|

* データセットの形にする。
  #+NAME: d03c85c7-c3b9-4982-977e-4bd60506f035
  #+BEGIN_SRC ein-python :session localhost :results raw drawer :exports both
    target = df.pop('target')
    dataset = tf.data.Dataset.from_tensor_slices((df.values, target.values))
    for feat, targ in dataset.take(5):
        print_infos([
            '{:20}:'.format('Features'),
            feat,
            '{:20}: {}'.format('Target', targ),
        ])
  #+END_SRC

  #+RESULTS: d03c85c7-c3b9-4982-977e-4bd60506f035
  :results:
  Features            :
  tf.Tensor(
  [ 63.    1.    1.  145.  233.    1.    2.  150.    0.    2.3   3.    0.
     2. ], shape=(13,), dtype=float64)
  Target              : 0
  Features            :
  tf.Tensor(
  [ 67.    1.    4.  160.  286.    0.    2.  108.    1.    1.5   2.    3.
     3. ], shape=(13,), dtype=float64)
  Target              : 1
  Features            :
  tf.Tensor(
  [ 67.    1.    4.  120.  229.    0.    2.  129.    1.    2.6   2.    2.
     4. ], shape=(13,), dtype=float64)
  Target              : 0
  Features            :
  tf.Tensor(
  [ 37.    1.    3.  130.  250.    0.    0.  187.    0.    3.5   3.    0.
     3. ], shape=(13,), dtype=float64)
  Target              : 0
  Features            :
  tf.Tensor(
  [ 41.    0.    2.  130.  204.    0.    2.  172.    0.    1.4   1.    0.
     3. ], shape=(13,), dtype=float64)
  Target              : 0
  :end:

  thal がカテゴリ id になっていることの確認
#+NAME: 273ea234-7adb-49d9-9f4e-6052c8d7ba93
#+BEGIN_SRC ein-python :session localhost :results raw drawer :exports both
tf.constant(df['thal'])
#+END_SRC

#+RESULTS: 273ea234-7adb-49d9-9f4e-6052c8d7ba93
:results:
<tf.Tensor: id=395900, shape=(303,), dtype=int32, numpy=
array([2, 3, 4, 3, 3, 3, 3, 3, 4, 4, 2, 3, 2, 4, 4, 3, 4, 3, 3, 3, 3, 3,
       3, 4, 4, 3, 3, 3, 3, 4, 3, 4, 3, 4, 3, 3, 4, 2, 4, 3, 4, 3, 4, 4,
       2, 3, 3, 4, 3, 3, 4, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 4,
       4, 2, 3, 3, 4, 3, 4, 3, 3, 4, 4, 3, 3, 4, 4, 3, 3, 3, 3, 4, 4, 4,
       3, 3, 4, 3, 4, 4, 3, 4, 3, 3, 3, 4, 3, 4, 4, 3, 3, 4, 4, 4, 4, 4,
       3, 3, 3, 3, 4, 3, 4, 3, 4, 4, 3, 3, 2, 4, 4, 2, 3, 3, 4, 4, 3, 4,
       3, 3, 4, 2, 4, 4, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
       4, 3, 3, 3, 4, 3, 4, 3, 4, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3,
       3, 3, 3, 3, 3, 3, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 2,
       4, 4, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 2, 2, 4, 3, 4, 2, 4, 3,
       3, 4, 3, 3, 3, 3, 4, 3, 4, 3, 4, 2, 2, 4, 3, 4, 3, 2, 4, 3, 3, 2,
       4, 4, 4, 4, 3, 0, 3, 3, 3, 3, 1, 4, 3, 3, 3, 4, 3, 4, 3, 3, 3, 4,
       3, 3, 4, 4, 4, 4, 3, 3, 4, 3, 4, 3, 4, 4, 3, 4, 4, 3, 4, 4, 3, 3,
       3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 3, 2, 4, 4, 4, 4], dtype=int32)>
:end:

#+NAME: ac1baf78-80fe-4f78-af3a-660dfa2ab1fd
#+BEGIN_SRC ein-python :session localhost :results raw drawer
train_dataset = dataset.shuffle(len(df)).batch(1)
#+END_SRC

#+RESULTS: ac1baf78-80fe-4f78-af3a-660dfa2ab1fd
:results:
:end:

* モデルの作成
  #+NAME: 9e24a045-cdf1-4612-ae0a-43716f83393b
  #+BEGIN_SRC ein-python :session localhost :results none
    def build_model():
        model = keras.Sequential([
            keras.layers.Dense(10, activation='relu'),
            keras.layers.Dense(10, activation='relu'),
            keras.layers.Dense(1, activation='sigmoid')
        ])

        model.compile(optimizer='adam',
                      loss='binary_crossentropy',
                      metrics=['accuracy'])
        return model

    model = build_model()
    model.fit(train_dataset, epochs=15)
  #+END_SRC

  #+RESULTS: 9e24a045-cdf1-4612-ae0a-43716f83393b

  Epoch 15/15
  303/303 [==============================] - 1s 2ms/step - loss: 0.4340 - accuracy: 0.8066

* モデルの作成(functional api)
  #+NAME: 443f1ba8-66ba-4e7f-9524-113807f8866a
  #+BEGIN_SRC ein-python :session localhost :results raw drawer
    inputs = {key: keras.layers.Input(shape=(), name=key) for key in df.keys()}
    x = tf.stack(list(inputs.values()), axis=-1)

    x = keras.layers.Dense(10, activation='relu')(x)
    output = keras.layers.Dense(1, activation='sigmoid')(x)

    model_func = keras.Model(inputs=inputs, outputs=output)
    model_func.compile(optimizer='adam',
                       loss='binary_crossentropy',
                       metrics=['accuracy'])

    model.summary()
  #+END_SRC

  #+RESULTS: 443f1ba8-66ba-4e7f-9524-113807f8866a
  :results:
  Model: "sequential_27"
  _________________________________________________________________
  Layer (type)                 Output Shape              Param #   
  =================================================================
  dense_81 (Dense)             multiple                  140       
  _________________________________________________________________
  dense_82 (Dense)             multiple                  110       
  _________________________________________________________________
  dense_83 (Dense)             multiple                  11        
  =================================================================
  Total params: 261
  Trainable params: 261
  Non-trainable params: 0
  _________________________________________________________________
  :end:


  #+NAME: a7b45210-16d8-4491-bd9e-965392f26664
  #+BEGIN_SRC ein-python :session localhost :results raw drawer
    dict_slices = tf.data.Dataset.from_tensor_slices((df.to_dict('list'), target.values)).batch(16)
    for dict_slice in dict_slices.take(1):
        print(dict_slice)
  #+END_SRC

  #+RESULTS: a7b45210-16d8-4491-bd9e-965392f26664
  :results:
  ({'age': <tf.Tensor: id=905885, shape=(16,), dtype=int32, numpy=
  array([63, 67, 67, 37, 41, 56, 62, 57, 63, 53, 57, 56, 56, 44, 52, 57],
        dtype=int32)>, 'sex': <tf.Tensor: id=905893, shape=(16,), dtype=int32, numpy=array([1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1], dtype=int32)>, 'cp': <tf.Tensor: id=905888, shape=(16,), dtype=int32, numpy=array([1, 4, 4, 3, 2, 2, 4, 4, 4, 4, 4, 2, 3, 2, 3, 3], dtype=int32)>, 'trestbps': <tf.Tensor: id=905897, shape=(16,), dtype=int32, numpy=
  array([145, 160, 120, 130, 130, 120, 140, 120, 130, 140, 140, 140, 130,
         120, 172, 150], dtype=int32)>, 'chol': <tf.Tensor: id=905887, shape=(16,), dtype=int32, numpy=
  array([233, 286, 229, 250, 204, 236, 268, 354, 254, 203, 192, 294, 256,
         263, 199, 168], dtype=int32)>, 'fbs': <tf.Tensor: id=905890, shape=(16,), dtype=int32, numpy=array([1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0], dtype=int32)>, 'restecg': <tf.Tensor: id=905892, shape=(16,), dtype=int32, numpy=array([2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 0, 2, 2, 0, 0, 0], dtype=int32)>, 'thalach': <tf.Tensor: id=905896, shape=(16,), dtype=int32, numpy=
  array([150, 108, 129, 187, 172, 178, 160, 163, 147, 155, 148, 153, 142,
         173, 162, 174], dtype=int32)>, 'exang': <tf.Tensor: id=905889, shape=(16,), dtype=int32, numpy=array([0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0], dtype=int32)>, 'oldpeak': <tf.Tensor: id=905891, shape=(16,), dtype=float32, numpy=
  array([2.3, 1.5, 2.6, 3.5, 1.4, 0.8, 3.6, 0.6, 1.4, 3.1, 0.4, 1.3, 0.6,
         0. , 0.5, 1.6], dtype=float32)>, 'slope': <tf.Tensor: id=905894, shape=(16,), dtype=int32, numpy=array([3, 2, 2, 3, 1, 1, 3, 1, 2, 3, 2, 2, 2, 1, 1, 1], dtype=int32)>, 'ca': <tf.Tensor: id=905886, shape=(16,), dtype=int32, numpy=array([0, 3, 2, 0, 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 0, 0], dtype=int32)>, 'thal': <tf.Tensor: id=905895, shape=(16,), dtype=int32, numpy=array([2, 3, 4, 3, 3, 3, 3, 3, 4, 4, 2, 3, 2, 4, 4, 3], dtype=int32)>}, <tf.Tensor: id=905898, shape=(16,), dtype=int64, numpy=array([0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0])>)
  :end:

#+NAME: a6dec040-5dde-45e9-906c-5cdbd8dd71bb
#+BEGIN_SRC ein-python :session localhost :results none
  model_func.fit(dict_slices, epochs=15)
#+END_SRC

#+RESULTS: a6dec040-5dde-45e9-906c-5cdbd8dd71bb

Epoch 15/15
19/19 [==============================] - 0s 3ms/step - loss: 0.5703 - accuracy: 0.7822
